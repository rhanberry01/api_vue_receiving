{"remainingRequest":"C:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\babel-loader\\lib\\index.js!C:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\src\\store.js","dependencies":[{"path":"C:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\src\\store.js","mtime":1559280381339},{"path":"C:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\node-projects\\\\Receiving\\\\franchisee\\\\api_vue_receiving\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//load store to main.js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    branch_name: '',\n    message: 'orayt',\n    count: 0,\n    receiving_no: ''\n  },\n  mutations: {\n    //synchronus\n    increment: function increment(state, payload) {\n      state.count += payload;\n    },\n    branch_name: function () {\n      var _branch_name = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(state, payload) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return payload;\n\n              case 2:\n                state.branch_name = _context.sent;\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function branch_name(_x, _x2) {\n        return _branch_name.apply(this, arguments);\n      }\n\n      return branch_name;\n    }(),\n    receiving_no: function () {\n      var _receiving_no = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(state, payload) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return payload;\n\n              case 2:\n                state.receiving_no = _context2.sent;\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function receiving_no(_x3, _x4) {\n        return _receiving_no.apply(this, arguments);\n      }\n\n      return receiving_no;\n    }()\n  },\n  actions: {\n    //async chronus\n    increment: function increment(state, payload) {\n      state.commit('increment', payload);\n    }\n  },\n  getters: {\n    message: function message(state) {\n      return state.message.toUpperCase();\n    },\n    branch_name: function branch_name(state) {\n      return state.branch_name.toUpperCase();\n    },\n    counter: function counter(state) {\n      return state.count;\n    },\n    receiving_no: function receiving_no(state) {\n      return state.receiving_no;\n    }\n  }\n});",{"version":3,"sources":["C:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\src\\store.js"],"names":["Vue","Vuex","use","Store","state","branch_name","message","count","receiving_no","mutations","increment","payload","actions","commit","getters","toUpperCase","counter"],"mappings":";;AAAA;AAEA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEAD,GAAG,CAACE,GAAJ,CAAQD,IAAR;AACA,eAAe,IAAIA,IAAI,CAACE,KAAT,CAAe;AAC1BC,EAAAA,KAAK,EAAE;AACHC,IAAAA,WAAW,EAAE,EADV;AAEHC,IAAAA,OAAO,EAAE,OAFN;AAGHC,IAAAA,KAAK,EAAE,CAHJ;AAIHC,IAAAA,YAAY,EAAE;AAJX,GADmB;AAO1BC,EAAAA,SAAS,EAAE;AAAE;AACTC,IAAAA,SADO,qBACGN,KADH,EACUO,OADV,EACmB;AACtBP,MAAAA,KAAK,CAACG,KAAN,IAAeI,OAAf;AACH,KAHM;AAIDN,IAAAA,WAJC;AAAA;AAAA;AAAA,+CAIWD,KAJX,EAIkBO,OAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAKuBA,OALvB;;AAAA;AAKHP,gBAAAA,KAAK,CAACC,WALH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAODG,IAAAA,YAPC;AAAA;AAAA;AAAA,gDAOYJ,KAPZ,EAOmBO,OAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAQwBA,OARxB;;AAAA;AAQHP,gBAAAA,KAAK,CAACI,YARH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,GAPe;AAkB1BI,EAAAA,OAAO,EAAE;AAAE;AACPF,IAAAA,SADK,qBACKN,KADL,EACYO,OADZ,EACqB;AACtBP,MAAAA,KAAK,CAACS,MAAN,CAAa,WAAb,EAA0BF,OAA1B;AACH;AAHI,GAlBiB;AAuB1BG,EAAAA,OAAO,EAAE;AACLR,IAAAA,OADK,mBACGF,KADH,EACU;AACX,aAAOA,KAAK,CAACE,OAAN,CAAcS,WAAd,EAAP;AACH,KAHI;AAILV,IAAAA,WAJK,uBAIOD,KAJP,EAIc;AACf,aAAOA,KAAK,CAACC,WAAN,CAAkBU,WAAlB,EAAP;AACH,KANI;AAOLC,IAAAA,OAPK,mBAOGZ,KAPH,EAOU;AACX,aAAOA,KAAK,CAACG,KAAb;AACH,KATI;AAULC,IAAAA,YAVK,wBAUQJ,KAVR,EAUe;AAChB,aAAOA,KAAK,CAACI,YAAb;AACH;AAZI;AAvBiB,CAAf,CAAf","sourcesContent":["//load store to main.js\r\n\r\nimport Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex)\r\nexport default new Vuex.Store({\r\n    state: {\r\n        branch_name: '',\r\n        message: 'orayt',\r\n        count: 0,\r\n        receiving_no: '',\r\n    },\r\n    mutations: { //synchronus\r\n        increment(state, payload) {\r\n            state.count += payload\r\n        },\r\n        async branch_name(state, payload) {\r\n            state.branch_name = await payload\r\n        },\r\n        async receiving_no(state, payload){\r\n            state.receiving_no = await payload\r\n        }\r\n    },\r\n    actions: { //async chronus\r\n        increment(state, payload) {\r\n            state.commit('increment', payload)\r\n        }\r\n    },\r\n    getters: {\r\n        message(state) {\r\n            return state.message.toUpperCase()\r\n        },\r\n        branch_name(state) {\r\n            return state.branch_name.toUpperCase()\r\n        },\r\n        counter(state) {\r\n            return state.count\r\n        },\r\n        receiving_no(state) {\r\n            return state.receiving_no\r\n        }\r\n    }\r\n})"]}]}