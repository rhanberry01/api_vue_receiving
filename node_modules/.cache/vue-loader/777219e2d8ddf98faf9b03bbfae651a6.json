{"remainingRequest":"C:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\src\\components\\gulay\\PriceReport.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\src\\components\\gulay\\PriceReport.vue","mtime":1585941060090},{"path":"C:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport axios from 'axios';\r\nimport { msgError, msgSuccess, apiUrl, tokenApi, getSessionCurrentUrl } from './../../assets/custom/custom.js'\r\nimport moment from 'moment'\r\nexport default {\r\n    data(){\r\n        return {\r\n            p_po_no: '',\r\n            btn_search: false,\r\n            btn_update: false,\r\n            loading_update: false,\r\n            loading_search: false,\r\n            dateNow: moment().format('DD-MMM-YY hh:mm A').toUpperCase(),\r\n            gulayList: [],\r\n            branches: [],\r\n            is_connected: [],\r\n            v_code: 'srsn'\r\n            \r\n        }   \r\n    },\r\n    async mounted(){\r\n      await this.fetch_gulay_list()\r\n        getSessionCurrentUrl(this, 'PriceReport')\r\n    },\r\n    methods:{\r\n        async fetch_gulay_list(update_scale=''){\r\n            this.gulayList = []\r\n            this.btn_search     = true\r\n            this.loading_search = true\r\n            try {\r\n                let query   = {\r\n                    params: {\r\n                        update_scale,\r\n                        v_code: this.v_code\r\n                    },\r\n                    headers: tokenApi('token', 'header')\r\n                }\r\n                \r\n                let result  = await axios.get(apiUrl('purchaser/receive_po/timbangan/report'), query)\r\n                let data    = result.data\r\n                this.branches = data.branches\r\n                this.gulayList = data.gulayList\r\n                this.is_connected = data.is_connected\r\n                this.dateNow = moment(data.dateModify).format('MM-DD-YYYY hh:mm A').toUpperCase()\r\n                \r\n            } catch (error) {\r\n                await this.handdleError(error)\r\n            }\r\n            this.btn_search     = false\r\n            this.loading_search = false\r\n        },\r\n        async update_po(trans_id, trans_type) {\r\n            this.btn_update     = true\r\n            this.loading_update = true\r\n            try {\r\n                let query   = {\r\n                    params: {\r\n                        p_trans_id: trans_id,\r\n                        p_trans_type: trans_type\r\n                    },\r\n                    headers: tokenApi('token', 'header')\r\n                }\r\n                \r\n                let result = await axios.get(apiUrl('purchaser/receive_po/po/update_po'), query)\r\n                let data = result.data\r\n                if(data.message != \"\" ){\r\n                     msgError(401, data.message)\r\n                } else {\r\n                    msgSuccess(200, \"Successfully updated items\")\r\n                }\r\n            } catch (error) { \r\n                await this.handdleError(error)\r\n            }\r\n            this.btn_update     = false\r\n            this.loading_update = false\r\n        },\r\n        async handdleError(error=null){\r\n            if (error != null) {\r\n                const response = JSON.parse(JSON.stringify(error))\r\n                const status = response.response.status.toString()\r\n                const message = (response.response.data.error === undefined) ? response.response.data.message : response.response.data.error.message\r\n                msgError(status, message)\r\n                return true\r\n            }\r\n                msgError(401, \"Something Wrong\")\r\n        },\r\n        getDif(srp, srp1) {\r\n          srp = parseFloat(srp)\r\n          srp = srp.toFixed(2)\r\n          srp1 = parseFloat(srp1)\r\n          srp1 = srp1.toFixed(2)\r\n          let total = srp - srp1\r\n          if(total === 0) {\r\n            return ''\r\n          }\r\n          return total.toFixed(2)\r\n        }\r\n    }\r\n}\r\n\r\n",{"version":3,"sources":["PriceReport.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PriceReport.vue","sourceRoot":"src/components/gulay","sourcesContent":["<template>\r\n    <div class=\"panel-body\">\r\n       \r\n        <!-- Main content -->\r\n        <div class=\"content-wrapper col-sm-12\" >\r\n            <div class=\"panel panel-flat\">\r\n                <!-- <div class=\"panel-heading\">\r\n                    <p class=\"panel-title\">UPDATE P.O</p>\r\n                    <div class=\"heading-elements\">\r\n                        <ul class=\"icons-list\">\r\n                            <li><a data-action=\"collapse\"></a></li>\r\n                        </ul>\r\n                    </div>\r\n                </div> -->\r\n                <div class=\"table-responsive\">\r\n                    <table class=\"table table-bordered\">\r\n                        <thead >\r\n                            <!-- <tr>\r\n                                <th style=\"text-align:center;font-size:12px;\">\r\n                                    P.O #:\r\n                                </th>\r\n                                <th>\r\n                                    <input type=\"text\" class=\"form-control\" v-model=\"p_po_no\">\r\n                                </th>\r\n                            </tr> -->\r\n                            <tr>\r\n                                <th colspan=\"2\">\r\n                                    <div class=\"col-xs-4 col-md-4\">\r\n                                      <select class=\"form-control\" v-model=\"v_code\" v-on:change=\"fetch_gulay_list()\">\r\n                                        <option v-for=\"(row, i) in branches\" :key=\"i\" :value=\"row.code\"> {{ row.name }} </option>\r\n                                      </select>\r\n                                    </div>\r\n                                    <!-- <button type=\"button\" :disabled=\"btn_search\" style=\"border-radius:0px;\" class=\"btn btn-sm btn-primary col-xs-4\" v-on:click=\"fetch_gulay_list()\">\r\n                                        <div v-if=\"loading_search\">\r\n                                            <i class=\"icon-spinner4 spinner position-left\"></i> PLEASE WAIT ..\r\n                                        </div>\r\n                                        <div v-if=\"!loading_search\">\r\n                                            <i class=\"fa fa-cancel\"></i> FRESH\r\n                                        </div>\r\n                                    </button> -->\r\n                                    <button type=\"button\" :disabled=\"btn_search\" style=\"border-radius:0px;\" class=\"btn btn-sm btn-warning col-xs-8\" v-on:click=\"fetch_gulay_list('update_scale')\">\r\n                                        <div v-if=\"loading_search\">\r\n                                            <i class=\"icon-spinner4 spinner position-left\"></i> PLEASE WAIT ..\r\n                                        </div>\r\n                                        <div v-if=\"!loading_search\">\r\n                                            <!-- <i class=\"icon-search4\"></i> -->\r\n                                             UPDATE WEIGHING SCALE\r\n                                        </div>\r\n                                    </button>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Main content -->\r\n        <div class=\"content-wrapper col-sm-12\" >\r\n            <div class=\"panel panel-flat\">\r\n                <div class=\"panel-heading\">\r\n                    <p class=\"panel-title\">SRS GULAY PRICE REPORT</p>\r\n                    <p class=\"panel-title\" v-for=\"(ping, i) in is_connected\" :key=\"i\">\r\n                      <label class=\"label label-danger\" v-if=\"!ping.is_connected\"> {{ (ping.w_s_type === 1) ? 'VEGE' : 'MEAT' }} STATUS OFFLINE</label>\r\n                      <label class=\"label label-success\" v-else> {{ (ping.w_s_type === 1) ? 'VEGE' : 'MEAT' }} STATUS ONLINE</label>\r\n                    </p>\r\n                    <p class=\"panel-title\">DATE PRICE UPDATED <b> {{ dateNow }} </b></p>\r\n                </div>\r\n\r\n                <div class=\"table-responsive\">\r\n                    <table class=\"table table-bordered\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Barcode</th>\r\n                          <th>Description</th>\r\n                          <th>SRP POS</th>\r\n                          <th>SRP TIMBANGAN</th>\r\n                          <th>DIF</th>\r\n                        </tr>\r\n                      </thead>\r\n                        <tbody>\r\n                            <tr v-for=\"(row, i) in gulayList\" :key=\"i\">\r\n                                <td style=\"text-align:center;font-size:12px;\">\r\n                                   {{ row.barcode }}\r\n                                </td>\r\n                                <td style=\"text-align:center;font-size:12px;\" v-html=\"row.description\">\r\n                                </td>\r\n                                <td style=\"text-align:center;font-size:12px;\">\r\n                                   {{ row.pos_srp | toFixed2 }}\r\n                                </td>\r\n                                <td style=\"text-align:center;font-size:12px;\">\r\n                                   {{ row.srp | toFixed2 }}\r\n                                </td>\r\n                                <td style=\"text-align:center;font-size:12px;\">\r\n                                   <p class=\"text-danger\">{{ getDif(row.srp, row.pos_srp) }}</p>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                         <tfoot>\r\n                          <tr>\r\n                            <th>Barcode</th>\r\n                            <th>Description</th>\r\n                            <th>SRP POS</th>\r\n                            <th>SRP TIMBANGAN</th>\r\n                            <th>DIF</th>\r\n                          </tr>\r\n                        </tfoot>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- End Main content -->\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { msgError, msgSuccess, apiUrl, tokenApi, getSessionCurrentUrl } from './../../assets/custom/custom.js'\r\nimport moment from 'moment'\r\nexport default {\r\n    data(){\r\n        return {\r\n            p_po_no: '',\r\n            btn_search: false,\r\n            btn_update: false,\r\n            loading_update: false,\r\n            loading_search: false,\r\n            dateNow: moment().format('DD-MMM-YY hh:mm A').toUpperCase(),\r\n            gulayList: [],\r\n            branches: [],\r\n            is_connected: [],\r\n            v_code: 'srsn'\r\n            \r\n        }   \r\n    },\r\n    async mounted(){\r\n      await this.fetch_gulay_list()\r\n        getSessionCurrentUrl(this, 'PriceReport')\r\n    },\r\n    methods:{\r\n        async fetch_gulay_list(update_scale=''){\r\n            this.gulayList = []\r\n            this.btn_search     = true\r\n            this.loading_search = true\r\n            try {\r\n                let query   = {\r\n                    params: {\r\n                        update_scale,\r\n                        v_code: this.v_code\r\n                    },\r\n                    headers: tokenApi('token', 'header')\r\n                }\r\n                \r\n                let result  = await axios.get(apiUrl('purchaser/receive_po/timbangan/report'), query)\r\n                let data    = result.data\r\n                this.branches = data.branches\r\n                this.gulayList = data.gulayList\r\n                this.is_connected = data.is_connected\r\n                this.dateNow = moment(data.dateModify).format('MM-DD-YYYY hh:mm A').toUpperCase()\r\n                \r\n            } catch (error) {\r\n                await this.handdleError(error)\r\n            }\r\n            this.btn_search     = false\r\n            this.loading_search = false\r\n        },\r\n        async update_po(trans_id, trans_type) {\r\n            this.btn_update     = true\r\n            this.loading_update = true\r\n            try {\r\n                let query   = {\r\n                    params: {\r\n                        p_trans_id: trans_id,\r\n                        p_trans_type: trans_type\r\n                    },\r\n                    headers: tokenApi('token', 'header')\r\n                }\r\n                \r\n                let result = await axios.get(apiUrl('purchaser/receive_po/po/update_po'), query)\r\n                let data = result.data\r\n                if(data.message != \"\" ){\r\n                     msgError(401, data.message)\r\n                } else {\r\n                    msgSuccess(200, \"Successfully updated items\")\r\n                }\r\n            } catch (error) { \r\n                await this.handdleError(error)\r\n            }\r\n            this.btn_update     = false\r\n            this.loading_update = false\r\n        },\r\n        async handdleError(error=null){\r\n            if (error != null) {\r\n                const response = JSON.parse(JSON.stringify(error))\r\n                const status = response.response.status.toString()\r\n                const message = (response.response.data.error === undefined) ? response.response.data.message : response.response.data.error.message\r\n                msgError(status, message)\r\n                return true\r\n            }\r\n                msgError(401, \"Something Wrong\")\r\n        },\r\n        getDif(srp, srp1) {\r\n          srp = parseFloat(srp)\r\n          srp = srp.toFixed(2)\r\n          srp1 = parseFloat(srp1)\r\n          srp1 = srp1.toFixed(2)\r\n          let total = srp - srp1\r\n          if(total === 0) {\r\n            return ''\r\n          }\r\n          return total.toFixed(2)\r\n        }\r\n    }\r\n}\r\n\r\n</script>\r\n\r\n\r\n"]}]}