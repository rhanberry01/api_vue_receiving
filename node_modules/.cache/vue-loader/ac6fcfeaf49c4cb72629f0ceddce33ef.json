{"remainingRequest":"E:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\src\\components\\receive_open\\meat\\OpenMeat.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\src\\components\\receive_open\\meat\\OpenMeat.vue","mtime":1585935299824},{"path":"E:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\node-projects\\Receiving\\franchisee\\api_vue_receiving\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport axios from 'axios';\r\nimport { msgError, msgSuccess, apiUrl, tokenApi, getSessionCurrentUrl } from './../../../assets/custom/custom.js'\r\nimport moment from 'moment'\r\n\r\nexport default {\r\n    data(){\r\n        return {\r\n            total_sku: 0,\r\n            p_invoice_no: '',\r\n            receiving_no: '',\r\n            p_date: moment().format('YYYY-MM-DD'),\r\n            p_supplier: '',\r\n            p_barcode: '',\r\n            p_uom: '',\r\n            file: '',\r\n            p_temp_id: '',\r\n            p_pos_markup: '',\r\n            p_qty: 1,\r\n            p_pos_barcode: '',\r\n            p_remarks: '',\r\n            p_pos_product_id: '',\r\n            p_unit_cost:'',\r\n            temporary_show: false,\r\n            loading_post: false,\r\n            loading_barcode: false,\r\n            btn_cancel: false,\r\n            btn_post: true,\r\n            list_supplier_open: [],\r\n            list_temporary_items: [],\r\n            list_uoms:[]\r\n        }\r\n    },\r\n    async mounted(){\r\n        getSessionCurrentUrl(this, 'OpenPoMeat')\r\n        await this.fetch_supplier_open()\r\n        await this.fetch_list_uom()\r\n    },\r\n    methods:{\r\n        async fetch_supplier_open() {\r\n           let query = {\r\n               headers: tokenApi('token', 'header')\r\n           }\r\n           try {\r\n               let result = await axios.get(apiUrl('purchaser/receive_po/op/meat/fetch_supplier_open'), query)\r\n               let data   = result.data\r\n               this.list_supplier_open = data.list_supplier_open\r\n           } catch (error) {\r\n               await this.handdleError(error)\r\n           }\r\n        },\r\n        async fetch_barcode(){\r\n            let query = {\r\n               params: {\r\n                    p_barcode: this.p_barcode,\r\n                    p_vendor_code: this.p_supplier\r\n               },\r\n               headers: tokenApi('token', 'header')\r\n           }\r\n           try {\r\n               let result = await axios.get(apiUrl('purchaser/receive_po/op/meat/fetch_barcode'), query)\r\n               let data   = result.data\r\n               \r\n               this.p_barcode = data.vendor_product.description\r\n               if (this.p_uom == \"\") {\r\n                   this.p_uom = data.pos_product[0].uom\r\n               }\r\n               if (this.p_unit_cost == \"\") {\r\n                   this.p_unit_cost = data.vendor_product.cost.toFixed(3)\r\n               }\r\n               this.p_pos_barcode    = data.pos_product[0].barcode\r\n               this.p_pos_product_id = data.vendor_product.productid\r\n               this.p_pos_markup     = data.pos_product[0].markup\r\n\r\n           } catch (error) {\r\n               await this.handdleError(error)\r\n           }\r\n        },\r\n        async delete_items(temp_receiving_id, id) {\r\n            try {\r\n                let confirm = window.confirm('Confirm delete');\r\n                if(confirm) {\r\n                    let data = {\r\n                        p_temp_id: temp_receiving_id,\r\n                        p_invoice_no: this.p_invoice_no, \r\n                        p_supplier: this.p_supplier,\r\n                        p_id: id\r\n                    }\r\n                    let result = await axios.post(apiUrl('purchaser/receive_po/op/meat/delete_items'), data , tokenApi())\r\n                    let res    = result.data\r\n                    let query = {\r\n                        p_invoice_no: this.p_invoice_no,\r\n                        p_supplier: this.p_supplier\r\n                    }\r\n\r\n                    await this.fetch_temporary_item(query)\r\n                    msgSuccess(200, \"Successfully deleted items\")\r\n                    if (res.count_items == 1) {\r\n                        window.location.href = '/receive/op/meat'\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                await this.handdleError(error)\r\n            }\r\n        },\r\n        async add_item(){\r\n            try {\r\n                let data = {\r\n                    p_vendor_code  : this.p_supplier,\r\n                    p_invoice_no   : this.p_invoice_no,\r\n                    p_date_deliver : this.p_date,\r\n\r\n                    p_product_id : this.p_pos_product_id,\r\n                    p_barcode: this.p_pos_barcode,\r\n                    p_item_name: this.p_barcode,\r\n                    p_uom: this.p_uom,\r\n                    p_qty: this.p_qty,\r\n                    p_price: this.p_unit_cost,\r\n                    p_markup: this.p_pos_markup\r\n                }\r\n\r\n                await axios.post(apiUrl('purchaser/receive_po/op/meat/add_item'), data , tokenApi())\r\n                let query = {\r\n                    p_invoice_no: this.p_invoice_no,\r\n                    p_supplier: this.p_supplier\r\n                }\r\n\r\n                await this.fetch_temporary_item(query)\r\n            } catch (error) {\r\n                await this.handdleError(error)\r\n            }\r\n        },\r\n        async approve(){\r\n            let invoice_no = this.p_invoice_no\r\n            let supplier   = this.p_supplier\r\n            let date       = this.p_date\r\n\r\n            if (invoice_no == \"\") {\r\n                return msgError(401, 'INVOICE NUMBER IS REQUIRED')\r\n            }\r\n\r\n            if (supplier == \"\") {\r\n                return msgError(401, 'SUPPLIER IS REQUIRED')\r\n            }\r\n\r\n            if (date == \"\") {\r\n                return msgError(401, 'DATE IS REQUIRED')\r\n            }\r\n            let query = {\r\n                p_invoice_no: invoice_no,\r\n                p_supplier: supplier\r\n            }\r\n            \r\n            await this.fetch_temporary_item(query, 'check_supplier')\r\n            this.temporary_show  = true\r\n        },\r\n        async fetch_list_uom(){\r\n            try {\r\n                let query = {\r\n                    headers: tokenApi('token', 'header')\r\n                }\r\n                let result = await axios.get(apiUrl('purchaser/receive_po/op/meat/fetch_list_uom'), query)\r\n                let data   = result.data\r\n                this.list_uoms = data.list_uoms\r\n            } catch (error) {\r\n                console.log(error)\r\n                await this.handdleError(error)\r\n            }\r\n        },\r\n        async refresh(){\r\n            this.file =  ''\r\n            this.p_invoice_no =  ''\r\n            this.p_date =  moment().format('YYYY-MM-DD')\r\n            this.p_supplier =  ''\r\n            this.p_barcode =  ''\r\n            this.p_uom =  ''\r\n            this.p_temp_id =  ''\r\n            this.p_pos_markup =  ''\r\n            this.p_qty =  1\r\n            this.p_pos_barcode =  ''\r\n            this.p_remarks =  ''\r\n            this.p_pos_product_id =  ''\r\n            this.p_unit_cost = ''\r\n            this.temporary_show =  false\r\n            this.loading_post =  false\r\n            this.loading_barcode =  false\r\n            this.btn_cancel =  false\r\n            this.btn_post =  true\r\n            this.list_temporary_items =  []\r\n        },\r\n        async cancel(temp_receiving_id, p_supplier) {\r\n            swal({\r\n                title: \"Are you sure?\",\r\n                text: \"You will not be able to recover this!\",\r\n                type: \"warning\",\r\n                showCancelButton: true,\r\n                confirmButtonColor: \"#DD6B55\",\r\n                confirmButtonText: \"Yes, delete it!\",\r\n                closeOnConfirm: false,\r\n                html: false\r\n            }, async function(){\r\n                 let data = {\r\n                    p_temp_id: temp_receiving_id,\r\n                    p_supplier: p_supplier,\r\n                    p_id: null,\r\n                    p_type: 'cancel'\r\n                }\r\n                await axios.post(apiUrl('purchaser/receive_po/op/meat/delete_items'), data , tokenApi())\r\n                window.location.href = '/receive/op/meat'\r\n            })\r\n        },\r\n        async post_receiving() {\r\n            try {\r\n                let formData = new FormData()\r\n                if (this.file == \"\") {\r\n                    return msgError(401, \"Invoice file is required\")\r\n                }\r\n\r\n                if (this.p_temp_id == \"\") {\r\n                    return msgError(401, \"NO TEMPORARY ID\")\r\n                }\r\n\r\n                this.btn_post = true\r\n                this.loading_post = true\r\n\r\n                formData.append('file', this.file)\r\n                formData.append('p_inv_no', this.p_invoice_no)\r\n                formData.append('p_vendor_code', this.p_supplier)\r\n                formData.append('p_remarks', this.p_remarks)\r\n                formData.append('p_temp_id', this.p_temp_id)\r\n                \r\n                let result = await axios.post(apiUrl('purchaser/receive_po/op/meat/post_receiving'), formData, tokenApi())\r\n                let res    = result.data\r\n\r\n                this.$session.flash.set('receiving_no', res.receiving_no)\r\n                this.receiving_no = this.$session.flash.get('receiving_no')\r\n                this.$router.push({ name: 'OpenPoMeat' })\r\n                await this.refresh()\r\n            } catch (error) {\r\n                this.handdleError(error)\r\n            }\r\n            this.btn_post = false\r\n            this.loading_post = false\r\n        },\r\n        async fetch_temporary_item(params,check_supplier=\"\"){\r\n          try {\r\n              this.btn_cancel = false\r\n              let query = {\r\n                  headers : tokenApi('token', 'header'),\r\n                  params : params\r\n              }\r\n              let result = await axios.get(apiUrl('purchaser/receive_po/op/meat/fetch_temporary_item'), query)\r\n              let data   = result.data\r\n              if (data.list_temporary_items.length > 0) {\r\n                    this.btn_cancel = true\r\n                    this.btn_post   = false\r\n              }\r\n              this.p_temp_id            = data.temp_id\r\n              this.list_temporary_items = data.list_temporary_items\r\n              this.total_sku = data.list_temporary_items.length\r\n              this.temporary_show = true\r\n          } catch (error) {\r\n              if (check_supplier == \"check_supplier\") {\r\n                    this.temporary_show = false\r\n              }\r\n              await this.handdleError(error)\r\n          }  \r\n            this.p_barcode = ''\r\n            this.p_uom = ''\r\n            this.p_pos_markup = ''\r\n            this.p_qty = 1\r\n            this.p_pos_barcode = ''\r\n            this.p_pos_product_id = ''\r\n            this.p_unit_cost =''\r\n        },\r\n        async handleFileUpload() {\r\n            this.file = this.$refs.file.files[0];\r\n        },\r\n        \r\n        totalCost(values){\r\n            return values.reduce((acc, val) =>{\r\n                return acc + parseFloat(val.net_price)\r\n            }, 0)\r\n        },\r\n        totalSkuScan(values){\r\n            return values.reduce((acc, val) =>{\r\n                return acc + parseFloat(val.qty)\r\n            }, 0)\r\n        },\r\n        async handdleError(error=null) {\r\n            if (error != null) {\r\n                const response = JSON.parse(JSON.stringify(error))\r\n                const status = response.response.status.toString()\r\n                const message = (response.response.data.error === undefined) ? response.response.data.message : response.response.data.error.message\r\n                msgError(status, message)\r\n                return true\r\n            }\r\n                msgError(401, \"Something Wrong\")\r\n        }\r\n\r\n    }\r\n}\r\n\r\n",{"version":3,"sources":["OpenMeat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"OpenMeat.vue","sourceRoot":"src/components/receive_open/meat","sourcesContent":["<template>\r\n    \r\n   <div class=\"panel-body\">\r\n    <!-- Main content -->\r\n    <div class=\"content-wrapper  col-sm-12\">\r\n        <div class=\"panel panel-flat\">\r\n            <div class=\"table-responsive\">\r\n                <div v-if=\"receiving_no != '' \">\r\n                    <div class=\"alert alert-success\" style=\"border-radius:0px;\"><h2>Receiving #  {{ receiving_no }} has been posted. Pakisulat sa Invoice. </h2></div>\r\n                </div>\r\n                <table class=\"table table-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>INVOICE #:</th>\r\n                            <th>\r\n                                <input type=\"hidden\" id=\"p_temp_id\" class=\"col-sm-12 form-control input-sm\" v-model=\"p_temp_id\">\r\n                                <input type=\"text\" id=\"p_invoice_no\" class=\"col-sm-12 form-control input-sm\" v-model=\"p_invoice_no\">\r\n                            </th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>SUPPLIER :</th>\r\n                            <th>\r\n                                <select v-model=\"p_supplier\" id=\"p_supplier\" class=\"col-sm-12 form-control input-sm\">\r\n                                    <option value=\"\"> -- SELECT --</option>\r\n                                    <option v-bind:value=\"row.vendor_code\" v-for=\"(row, i) in list_supplier_open\" :key=\"i\"> {{ row.description }}</option>\r\n                                </select>\r\n                            </th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>DATE RECEIVE : </th>\r\n                            <th>\r\n                                <input type=\"date\" id=\"p_date\" class=\"col-sm-12 form-control input-sm\" v-model=\"p_date\">\r\n                            </th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th> </th>\r\n                            <th>\r\n                                <button type=\"button\" class=\"col-sm-6 col-xs-12 btn btn-primary\" v-on:click=\"approve()\">APPROVE</button>\r\n                                <button type=\"button\" class=\"col-sm-6 col-xs-12 btn btn-danger\" :disabled=\"!btn_cancel\" v-on:click=\"cancel(p_temp_id, p_supplier)\">CANCEL</button>\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Main content -->\r\n    <div class=\"content-wrapper  col-sm-12\" v-show=\"temporary_show\">\r\n        <div class=\"panel panel-flat\">\r\n            <div class=\"panel-heading\">\r\n                <p class=\"panel-title\">ITEM SCANNED</p>\r\n            </div>\r\n\r\n            <div class=\"table-responsive\">\r\n                <table class=\"table table-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ITEM NAME</th>\r\n                            <th>DETAILS</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr v-for=\"(row, i) in list_temporary_items\" :key=\"i\">\r\n                            <td> {{row.item_name }} </td>\r\n                            <td> \r\n                                QTY: {{row.qty }} <br>\r\n                                UOM: {{row.uom }} <br>\r\n                                UNIT COST: {{row.price | toFixed2 }} <br>\r\n                                TOTAL: {{row.net_price | toFixed2}} <br>\r\n                            </td>\r\n                            <td> \r\n                                <button class=\"btn btn-danger btn-sm\" v-on:click=\"delete_items(row.temp_open_po_id, row.d_id)\"><i class=\"icon-cancel-circle2\"></i></button>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td>\r\n                                TOTAL: {{ totalCost(list_temporary_items) | toFixed2 }}\r\n                            </td>\r\n                            <td></td>\r\n                        </tr>\r\n                         <tr>\r\n                            <td>\r\n                                <p v-show=\"loading_barcode\" class=\"pull-left\" >\r\n                                    <i class=\"icon-spinner4 spinner position-left\"></i> PLEASE WAIT ..\r\n                                </p>\r\n                                <input type=\"hidden\" class=\"form-control\" v-model=\"p_pos_barcode\" v-on:keyup.13=\"fetch_barcode\">\r\n                                <input type=\"hidden\" class=\"form-control\" v-model=\"p_pos_markup\" v-on:keyup.13=\"fetch_barcode\">\r\n                                <input type=\"hidden\" class=\"form-control\" v-model=\"p_pos_product_id\" v-on:keyup.13=\"fetch_barcode\">\r\n                                <input class=\"form-control\" placeholder=\"Enter Barcode\" v-model=\"p_barcode\" v-on:keyup.13=\"fetch_barcode\">\r\n                                <select v-model=\"p_uom\" id=\"p_uom\" class=\"col-sm-12 form-control input-sm\">\r\n                                    <option value=\"\"> -- UOM -- </option>\r\n                                    <option v-bind:value=\"row.a1\" v-for=\"(row, i) in list_uoms\" :key=\"i\"> {{ row.a1 }}</option>\r\n                                </select>\r\n                            </td>\r\n                            <td>\r\n                                <input class=\"form-control\" style=\"text-align:left;\"  v-model=\"p_qty\" placeholder=\"QTY\">\r\n                                <input class=\"form-control\" style=\"text-align:left;\"  v-model=\"p_unit_cost\" placeholder=\"UNIT COST\">\r\n                            </td>\r\n                            <td>\r\n                                <button class=\"btn btn-primary\" v-on:click=\"add_item()\"><i class=\"icon-plus3\"></i></button>\r\n                            </td>\r\n                        </tr>\r\n                         <tr>\r\n                            <td style=\"text-align:center !important\">SKU SCANNED: {{ total_sku }}</td>\r\n                            <td style=\"text-align:center !important\">TOTAL SCAN QTY:   {{ totalSkuScan(list_temporary_items) }}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td colspan=\"3\">\r\n                                <textarea name=\"\" id=\"\" class=\"form-control\" placeholder=\"Remarks\" v-model=\"p_remarks\"></textarea>\r\n                            </td>\r\n                        <tr>\r\n                            <td colspan=\"3\">\r\n                              <input class=\"form-control\" style=\"text-align:left;\" id=\"file\" ref=\"file\"  v-on:change=\"handleFileUpload()\" type=\"file\" >\r\n                              ( Maaring Mag upload ng Multipe Scan Invoice Kung ito ay IMAGE file ) <br>\r\n                              ( Kung Ito naman ay pdf file isa lang ang maaring mong ma upload )\r\n                            </td>\r\n                        <tr>\r\n                        <tr>\r\n                            <td colspan=\"3\">\r\n                                \r\n                                <button type=\"button\" :disabled=\"btn_post\" class=\"btn btn-sm btn-primary col-xs-12\" v-on:click=\"post_receiving()\">\r\n                                    <div v-if=\"loading_post\">\r\n                                        <i class=\"icon-spinner4 spinner position-left\"></i> PLEASE WAIT ..\r\n                                    </div>\r\n                                    <div v-if=\"!loading_post\">\r\n                                        <i class=\"icon-checkmark\"></i> POST\r\n                                    </div>\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n        \r\n    </div>\r\n\r\n\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { msgError, msgSuccess, apiUrl, tokenApi, getSessionCurrentUrl } from './../../../assets/custom/custom.js'\r\nimport moment from 'moment'\r\n\r\nexport default {\r\n    data(){\r\n        return {\r\n            total_sku: 0,\r\n            p_invoice_no: '',\r\n            receiving_no: '',\r\n            p_date: moment().format('YYYY-MM-DD'),\r\n            p_supplier: '',\r\n            p_barcode: '',\r\n            p_uom: '',\r\n            file: '',\r\n            p_temp_id: '',\r\n            p_pos_markup: '',\r\n            p_qty: 1,\r\n            p_pos_barcode: '',\r\n            p_remarks: '',\r\n            p_pos_product_id: '',\r\n            p_unit_cost:'',\r\n            temporary_show: false,\r\n            loading_post: false,\r\n            loading_barcode: false,\r\n            btn_cancel: false,\r\n            btn_post: true,\r\n            list_supplier_open: [],\r\n            list_temporary_items: [],\r\n            list_uoms:[]\r\n        }\r\n    },\r\n    async mounted(){\r\n        getSessionCurrentUrl(this, 'OpenPoMeat')\r\n        await this.fetch_supplier_open()\r\n        await this.fetch_list_uom()\r\n    },\r\n    methods:{\r\n        async fetch_supplier_open() {\r\n           let query = {\r\n               headers: tokenApi('token', 'header')\r\n           }\r\n           try {\r\n               let result = await axios.get(apiUrl('purchaser/receive_po/op/meat/fetch_supplier_open'), query)\r\n               let data   = result.data\r\n               this.list_supplier_open = data.list_supplier_open\r\n           } catch (error) {\r\n               await this.handdleError(error)\r\n           }\r\n        },\r\n        async fetch_barcode(){\r\n            let query = {\r\n               params: {\r\n                    p_barcode: this.p_barcode,\r\n                    p_vendor_code: this.p_supplier\r\n               },\r\n               headers: tokenApi('token', 'header')\r\n           }\r\n           try {\r\n               let result = await axios.get(apiUrl('purchaser/receive_po/op/meat/fetch_barcode'), query)\r\n               let data   = result.data\r\n               \r\n               this.p_barcode = data.vendor_product.description\r\n               if (this.p_uom == \"\") {\r\n                   this.p_uom = data.pos_product[0].uom\r\n               }\r\n               if (this.p_unit_cost == \"\") {\r\n                   this.p_unit_cost = data.vendor_product.cost.toFixed(3)\r\n               }\r\n               this.p_pos_barcode    = data.pos_product[0].barcode\r\n               this.p_pos_product_id = data.vendor_product.productid\r\n               this.p_pos_markup     = data.pos_product[0].markup\r\n\r\n           } catch (error) {\r\n               await this.handdleError(error)\r\n           }\r\n        },\r\n        async delete_items(temp_receiving_id, id) {\r\n            try {\r\n                let confirm = window.confirm('Confirm delete');\r\n                if(confirm) {\r\n                    let data = {\r\n                        p_temp_id: temp_receiving_id,\r\n                        p_invoice_no: this.p_invoice_no, \r\n                        p_supplier: this.p_supplier,\r\n                        p_id: id\r\n                    }\r\n                    let result = await axios.post(apiUrl('purchaser/receive_po/op/meat/delete_items'), data , tokenApi())\r\n                    let res    = result.data\r\n                    let query = {\r\n                        p_invoice_no: this.p_invoice_no,\r\n                        p_supplier: this.p_supplier\r\n                    }\r\n\r\n                    await this.fetch_temporary_item(query)\r\n                    msgSuccess(200, \"Successfully deleted items\")\r\n                    if (res.count_items == 1) {\r\n                        window.location.href = '/receive/op/meat'\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                await this.handdleError(error)\r\n            }\r\n        },\r\n        async add_item(){\r\n            try {\r\n                let data = {\r\n                    p_vendor_code  : this.p_supplier,\r\n                    p_invoice_no   : this.p_invoice_no,\r\n                    p_date_deliver : this.p_date,\r\n\r\n                    p_product_id : this.p_pos_product_id,\r\n                    p_barcode: this.p_pos_barcode,\r\n                    p_item_name: this.p_barcode,\r\n                    p_uom: this.p_uom,\r\n                    p_qty: this.p_qty,\r\n                    p_price: this.p_unit_cost,\r\n                    p_markup: this.p_pos_markup\r\n                }\r\n\r\n                await axios.post(apiUrl('purchaser/receive_po/op/meat/add_item'), data , tokenApi())\r\n                let query = {\r\n                    p_invoice_no: this.p_invoice_no,\r\n                    p_supplier: this.p_supplier\r\n                }\r\n\r\n                await this.fetch_temporary_item(query)\r\n            } catch (error) {\r\n                await this.handdleError(error)\r\n            }\r\n        },\r\n        async approve(){\r\n            let invoice_no = this.p_invoice_no\r\n            let supplier   = this.p_supplier\r\n            let date       = this.p_date\r\n\r\n            if (invoice_no == \"\") {\r\n                return msgError(401, 'INVOICE NUMBER IS REQUIRED')\r\n            }\r\n\r\n            if (supplier == \"\") {\r\n                return msgError(401, 'SUPPLIER IS REQUIRED')\r\n            }\r\n\r\n            if (date == \"\") {\r\n                return msgError(401, 'DATE IS REQUIRED')\r\n            }\r\n            let query = {\r\n                p_invoice_no: invoice_no,\r\n                p_supplier: supplier\r\n            }\r\n            \r\n            await this.fetch_temporary_item(query, 'check_supplier')\r\n            this.temporary_show  = true\r\n        },\r\n        async fetch_list_uom(){\r\n            try {\r\n                let query = {\r\n                    headers: tokenApi('token', 'header')\r\n                }\r\n                let result = await axios.get(apiUrl('purchaser/receive_po/op/meat/fetch_list_uom'), query)\r\n                let data   = result.data\r\n                this.list_uoms = data.list_uoms\r\n            } catch (error) {\r\n                console.log(error)\r\n                await this.handdleError(error)\r\n            }\r\n        },\r\n        async refresh(){\r\n            this.file =  ''\r\n            this.p_invoice_no =  ''\r\n            this.p_date =  moment().format('YYYY-MM-DD')\r\n            this.p_supplier =  ''\r\n            this.p_barcode =  ''\r\n            this.p_uom =  ''\r\n            this.p_temp_id =  ''\r\n            this.p_pos_markup =  ''\r\n            this.p_qty =  1\r\n            this.p_pos_barcode =  ''\r\n            this.p_remarks =  ''\r\n            this.p_pos_product_id =  ''\r\n            this.p_unit_cost = ''\r\n            this.temporary_show =  false\r\n            this.loading_post =  false\r\n            this.loading_barcode =  false\r\n            this.btn_cancel =  false\r\n            this.btn_post =  true\r\n            this.list_temporary_items =  []\r\n        },\r\n        async cancel(temp_receiving_id, p_supplier) {\r\n            swal({\r\n                title: \"Are you sure?\",\r\n                text: \"You will not be able to recover this!\",\r\n                type: \"warning\",\r\n                showCancelButton: true,\r\n                confirmButtonColor: \"#DD6B55\",\r\n                confirmButtonText: \"Yes, delete it!\",\r\n                closeOnConfirm: false,\r\n                html: false\r\n            }, async function(){\r\n                 let data = {\r\n                    p_temp_id: temp_receiving_id,\r\n                    p_supplier: p_supplier,\r\n                    p_id: null,\r\n                    p_type: 'cancel'\r\n                }\r\n                await axios.post(apiUrl('purchaser/receive_po/op/meat/delete_items'), data , tokenApi())\r\n                window.location.href = '/receive/op/meat'\r\n            })\r\n        },\r\n        async post_receiving() {\r\n            try {\r\n                let formData = new FormData()\r\n                if (this.file == \"\") {\r\n                    return msgError(401, \"Invoice file is required\")\r\n                }\r\n\r\n                if (this.p_temp_id == \"\") {\r\n                    return msgError(401, \"NO TEMPORARY ID\")\r\n                }\r\n\r\n                this.btn_post = true\r\n                this.loading_post = true\r\n\r\n                formData.append('file', this.file)\r\n                formData.append('p_inv_no', this.p_invoice_no)\r\n                formData.append('p_vendor_code', this.p_supplier)\r\n                formData.append('p_remarks', this.p_remarks)\r\n                formData.append('p_temp_id', this.p_temp_id)\r\n                \r\n                let result = await axios.post(apiUrl('purchaser/receive_po/op/meat/post_receiving'), formData, tokenApi())\r\n                let res    = result.data\r\n\r\n                this.$session.flash.set('receiving_no', res.receiving_no)\r\n                this.receiving_no = this.$session.flash.get('receiving_no')\r\n                this.$router.push({ name: 'OpenPoMeat' })\r\n                await this.refresh()\r\n            } catch (error) {\r\n                this.handdleError(error)\r\n            }\r\n            this.btn_post = false\r\n            this.loading_post = false\r\n        },\r\n        async fetch_temporary_item(params,check_supplier=\"\"){\r\n          try {\r\n              this.btn_cancel = false\r\n              let query = {\r\n                  headers : tokenApi('token', 'header'),\r\n                  params : params\r\n              }\r\n              let result = await axios.get(apiUrl('purchaser/receive_po/op/meat/fetch_temporary_item'), query)\r\n              let data   = result.data\r\n              if (data.list_temporary_items.length > 0) {\r\n                    this.btn_cancel = true\r\n                    this.btn_post   = false\r\n              }\r\n              this.p_temp_id            = data.temp_id\r\n              this.list_temporary_items = data.list_temporary_items\r\n              this.total_sku = data.list_temporary_items.length\r\n              this.temporary_show = true\r\n          } catch (error) {\r\n              if (check_supplier == \"check_supplier\") {\r\n                    this.temporary_show = false\r\n              }\r\n              await this.handdleError(error)\r\n          }  \r\n            this.p_barcode = ''\r\n            this.p_uom = ''\r\n            this.p_pos_markup = ''\r\n            this.p_qty = 1\r\n            this.p_pos_barcode = ''\r\n            this.p_pos_product_id = ''\r\n            this.p_unit_cost =''\r\n        },\r\n        async handleFileUpload() {\r\n            this.file = this.$refs.file.files[0];\r\n        },\r\n        \r\n        totalCost(values){\r\n            return values.reduce((acc, val) =>{\r\n                return acc + parseFloat(val.net_price)\r\n            }, 0)\r\n        },\r\n        totalSkuScan(values){\r\n            return values.reduce((acc, val) =>{\r\n                return acc + parseFloat(val.qty)\r\n            }, 0)\r\n        },\r\n        async handdleError(error=null) {\r\n            if (error != null) {\r\n                const response = JSON.parse(JSON.stringify(error))\r\n                const status = response.response.status.toString()\r\n                const message = (response.response.data.error === undefined) ? response.response.data.message : response.response.data.error.message\r\n                msgError(status, message)\r\n                return true\r\n            }\r\n                msgError(401, \"Something Wrong\")\r\n        }\r\n\r\n    }\r\n}\r\n\r\n</script>\r\n\r\n\r\n<style scoped>\r\ninput, textarea, select, option{\r\n  border-radius: 0px !important;\r\n   font-size: 10px !important;\r\n   resize: none;\r\n}\r\n.btn {\r\n    border-radius: 0px;\r\n}\r\nth,td {\r\n  padding: 10px !important;\r\n  font-size: 10px;\r\n  text-align: center !important;\r\n}\r\n</style>\r\n\r\n"]}]}